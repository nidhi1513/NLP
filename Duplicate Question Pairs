{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6277,"databundleVersionId":323734,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nidhikandari/duplicate-question-pairs?scriptVersionId=192526286\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-13T17:06:56.931714Z","iopub.execute_input":"2024-08-13T17:06:56.932089Z","iopub.status.idle":"2024-08-13T17:06:58.068426Z","shell.execute_reply.started":"2024-08-13T17:06:56.932057Z","shell.execute_reply":"2024-08-13T17:06:58.067149Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/quora-question-pairs/train.csv.zip')","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:06:58.071775Z","iopub.execute_input":"2024-08-13T17:06:58.072228Z","iopub.status.idle":"2024-08-13T17:07:00.160984Z","shell.execute_reply.started":"2024-08-13T17:06:58.072198Z","shell.execute_reply":"2024-08-13T17:07:00.159893Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:00.162587Z","iopub.execute_input":"2024-08-13T17:07:00.162988Z","iopub.status.idle":"2024-08-13T17:07:01.511136Z","shell.execute_reply.started":"2024-08-13T17:07:00.162951Z","shell.execute_reply":"2024-08-13T17:07:01.509944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:01.513777Z","iopub.execute_input":"2024-08-13T17:07:01.514167Z","iopub.status.idle":"2024-08-13T17:07:01.522526Z","shell.execute_reply.started":"2024-08-13T17:07:01.514131Z","shell.execute_reply":"2024-08-13T17:07:01.521224Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:01.523879Z","iopub.execute_input":"2024-08-13T17:07:01.524183Z","iopub.status.idle":"2024-08-13T17:07:01.548513Z","shell.execute_reply.started":"2024-08-13T17:07:01.524157Z","shell.execute_reply":"2024-08-13T17:07:01.547451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.sample(10)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:01.54984Z","iopub.execute_input":"2024-08-13T17:07:01.550219Z","iopub.status.idle":"2024-08-13T17:07:01.586448Z","shell.execute_reply.started":"2024-08-13T17:07:01.550184Z","shell.execute_reply":"2024-08-13T17:07:01.584973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:01.588046Z","iopub.execute_input":"2024-08-13T17:07:01.588482Z","iopub.status.idle":"2024-08-13T17:07:01.694327Z","shell.execute_reply.started":"2024-08-13T17:07:01.588441Z","shell.execute_reply":"2024-08-13T17:07:01.693047Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:01.695678Z","iopub.execute_input":"2024-08-13T17:07:01.695989Z","iopub.status.idle":"2024-08-13T17:07:01.783109Z","shell.execute_reply.started":"2024-08-13T17:07:01.695961Z","shell.execute_reply":"2024-08-13T17:07:01.781726Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:01.784507Z","iopub.execute_input":"2024-08-13T17:07:01.789192Z","iopub.status.idle":"2024-08-13T17:07:02.210093Z","shell.execute_reply.started":"2024-08-13T17:07:01.789154Z","shell.execute_reply":"2024-08-13T17:07:02.208886Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df['is_duplicate'].value_counts())\nprint((df['is_duplicate'].value_counts()/df['is_duplicate'].count())*100)\ndf['is_duplicate'].value_counts().plot(kind='bar')","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:02.215061Z","iopub.execute_input":"2024-08-13T17:07:02.215435Z","iopub.status.idle":"2024-08-13T17:07:02.569651Z","shell.execute_reply.started":"2024-08-13T17:07:02.215405Z","shell.execute_reply":"2024-08-13T17:07:02.568538Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#repeated questions\n\nqid = pd.Series(df['qid1'].tolist()+df['qid2'].tolist())\nprint('Number of unique question',np.unique(qid).shape[0])\nX = qid.value_counts()>1\nprint('Number of questions getting repeated',X[X].shape[0])","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:02.57116Z","iopub.execute_input":"2024-08-13T17:07:02.571619Z","iopub.status.idle":"2024-08-13T17:07:02.994733Z","shell.execute_reply.started":"2024-08-13T17:07:02.571579Z","shell.execute_reply":"2024-08-13T17:07:02.993796Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#repeated questions histogram\n\nplt.hist(qid.value_counts().values,bins=100)\nplt.yscale('log')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:02.996192Z","iopub.execute_input":"2024-08-13T17:07:02.99655Z","iopub.status.idle":"2024-08-13T17:07:03.808592Z","shell.execute_reply.started":"2024-08-13T17:07:02.99652Z","shell.execute_reply":"2024-08-13T17:07:03.807515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df = df.sample(30000)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:03.81009Z","iopub.execute_input":"2024-08-13T17:07:03.810436Z","iopub.status.idle":"2024-08-13T17:07:03.835759Z","shell.execute_reply.started":"2024-08-13T17:07:03.810406Z","shell.execute_reply":"2024-08-13T17:07:03.834605Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:03.83704Z","iopub.execute_input":"2024-08-13T17:07:03.83748Z","iopub.status.idle":"2024-08-13T17:07:03.855562Z","shell.execute_reply.started":"2024-08-13T17:07:03.837442Z","shell.execute_reply":"2024-08-13T17:07:03.854506Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:03.856809Z","iopub.execute_input":"2024-08-13T17:07:03.857241Z","iopub.status.idle":"2024-08-13T17:07:03.897227Z","shell.execute_reply.started":"2024-08-13T17:07:03.857213Z","shell.execute_reply":"2024-08-13T17:07:03.896159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ques_df = new_df[['question1','question2']]\nques_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:07:03.898644Z","iopub.execute_input":"2024-08-13T17:07:03.899377Z","iopub.status.idle":"2024-08-13T17:07:03.913159Z","shell.execute_reply.started":"2024-08-13T17:07:03.899339Z","shell.execute_reply":"2024-08-13T17:07:03.91225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\n#merge text\nques_df['question1'] = ques_df['question1'].fillna('')\nques_df['question2'] = ques_df['question2'].fillna('')\nquestions = list(ques_df['question1'])+list(ques_df['question2'])\ncv= CountVectorizer(max_features=3000)\nq1_arr, q2_arr = np.vsplit(cv.fit_transform(questions).toarray(),2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:30.87981Z","iopub.execute_input":"2024-08-13T17:10:30.880202Z","iopub.status.idle":"2024-08-13T17:10:32.528217Z","shell.execute_reply.started":"2024-08-13T17:10:30.880174Z","shell.execute_reply":"2024-08-13T17:10:32.527058Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_df1 = pd.DataFrame(q1_arr,index = ques_df.index)\ntemp_df2 = pd.DataFrame(q2_arr,index = ques_df.index)\ntemp_df = pd.concat([temp_df1,temp_df2],axis=1)\ntemp_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:41.847666Z","iopub.execute_input":"2024-08-13T17:10:41.848062Z","iopub.status.idle":"2024-08-13T17:10:45.012821Z","shell.execute_reply.started":"2024-08-13T17:10:41.848031Z","shell.execute_reply":"2024-08-13T17:10:45.01178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_df","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:46.480297Z","iopub.execute_input":"2024-08-13T17:10:46.480736Z","iopub.status.idle":"2024-08-13T17:10:46.510032Z","shell.execute_reply.started":"2024-08-13T17:10:46.480705Z","shell.execute_reply":"2024-08-13T17:10:46.508832Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_df['is_duplicate'] = new_df['is_duplicate']","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:47.201142Z","iopub.execute_input":"2024-08-13T17:10:47.201887Z","iopub.status.idle":"2024-08-13T17:10:47.210537Z","shell.execute_reply.started":"2024-08-13T17:10:47.201853Z","shell.execute_reply":"2024-08-13T17:10:47.209284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:48.04375Z","iopub.execute_input":"2024-08-13T17:10:48.044109Z","iopub.status.idle":"2024-08-13T17:10:48.080592Z","shell.execute_reply.started":"2024-08-13T17:10:48.044084Z","shell.execute_reply":"2024-08-13T17:10:48.07926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(temp_df.iloc[:,0:-1].values,temp_df.iloc[:,-1].values,test_size=0.2,random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:48.474338Z","iopub.execute_input":"2024-08-13T17:10:48.474723Z","iopub.status.idle":"2024-08-13T17:10:52.152708Z","shell.execute_reply.started":"2024-08-13T17:10:48.474695Z","shell.execute_reply":"2024-08-13T17:10:52.151621Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nrf = RandomForestClassifier()\nrf.fit(X_train,y_train)\ny_pred = rf.predict(X_test)\naccuracy_score(y_test,y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:10:52.154632Z","iopub.execute_input":"2024-08-13T17:10:52.154993Z","iopub.status.idle":"2024-08-13T17:12:39.477511Z","shell.execute_reply.started":"2024-08-13T17:10:52.154964Z","shell.execute_reply":"2024-08-13T17:12:39.476443Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#feature engineering \nnew_df['q1_len'] = new_df['question1'].str.len()\nnew_df['q2_len'] = new_df['question2'].str.len()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:12:39.478988Z","iopub.execute_input":"2024-08-13T17:12:39.479352Z","iopub.status.idle":"2024-08-13T17:12:39.518945Z","shell.execute_reply.started":"2024-08-13T17:12:39.479321Z","shell.execute_reply":"2024-08-13T17:12:39.517857Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:13:51.697737Z","iopub.execute_input":"2024-08-13T17:13:51.698111Z","iopub.status.idle":"2024-08-13T17:13:51.712522Z","shell.execute_reply.started":"2024-08-13T17:13:51.698085Z","shell.execute_reply":"2024-08-13T17:13:51.711191Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['question1'] = new_df['question1'].fillna('').astype(str)\nnew_df['question2'] = new_df['question2'].fillna('').astype(str)\nnew_df['q1_num_words'] = new_df['question1'].apply(lambda row:len(row.split(\" \")))\nnew_df['q2_num_words'] = new_df['question2'].apply(lambda row:len(row.split(\" \")))","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:16.113096Z","iopub.execute_input":"2024-08-13T17:15:16.113514Z","iopub.status.idle":"2024-08-13T17:15:16.21919Z","shell.execute_reply.started":"2024-08-13T17:15:16.113483Z","shell.execute_reply":"2024-08-13T17:15:16.218192Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def common_words(row):\n    w1 = set(map(lambda word: word.lower().strip(),row['question1'].split(\" \")))\n    w2 = set(map(lambda word: word.lower().strip(),row['question1'].split(\" \")))\n    return len(w1 & w2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:18.951293Z","iopub.execute_input":"2024-08-13T17:15:18.9517Z","iopub.status.idle":"2024-08-13T17:15:18.957983Z","shell.execute_reply.started":"2024-08-13T17:15:18.951671Z","shell.execute_reply":"2024-08-13T17:15:18.95691Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['word_common'] = new_df.apply(common_words,axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:19.856065Z","iopub.execute_input":"2024-08-13T17:15:19.856781Z","iopub.status.idle":"2024-08-13T17:15:20.530422Z","shell.execute_reply.started":"2024-08-13T17:15:19.856746Z","shell.execute_reply":"2024-08-13T17:15:20.529246Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['word_common'] = new_df.apply(common_words,axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:19.856065Z","iopub.execute_input":"2024-08-13T17:15:19.856781Z","iopub.status.idle":"2024-08-13T17:15:20.530422Z","shell.execute_reply.started":"2024-08-13T17:15:19.856746Z","shell.execute_reply":"2024-08-13T17:15:20.529246Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def total_words(row):\n    w1 = set(map(lambda word : word.lower().strip(),row['question1'].split(\" \")))\n    w2 = set(map(lambda word: word.lower().strip(),row['question2'].split(\" \")))\n    return len(w1)+len(w2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:23.048432Z","iopub.execute_input":"2024-08-13T17:15:23.048839Z","iopub.status.idle":"2024-08-13T17:15:23.055038Z","shell.execute_reply.started":"2024-08-13T17:15:23.048809Z","shell.execute_reply":"2024-08-13T17:15:23.053689Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['word_total']= new_df.apply(total_words,axis=1)\nnew_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:23.963957Z","iopub.execute_input":"2024-08-13T17:15:23.96436Z","iopub.status.idle":"2024-08-13T17:15:24.613651Z","shell.execute_reply.started":"2024-08-13T17:15:23.964328Z","shell.execute_reply":"2024-08-13T17:15:24.612587Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['word_share']=round(new_df['word_common']/new_df['word_total'],2)\nnew_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:26.244604Z","iopub.execute_input":"2024-08-13T17:15:26.24499Z","iopub.status.idle":"2024-08-13T17:15:26.262618Z","shell.execute_reply.started":"2024-08-13T17:15:26.244951Z","shell.execute_reply":"2024-08-13T17:15:26.26156Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.displot(new_df['q1_len'])\nprint('minimum character',new_df['q1_len'].min())\nprint('maximum character',new_df['q1_len'].max())\nprint('average num of characters',int(new_df['q1_len'].mean()))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:27.667952Z","iopub.execute_input":"2024-08-13T17:15:27.66834Z","iopub.status.idle":"2024-08-13T17:15:28.235422Z","shell.execute_reply.started":"2024-08-13T17:15:27.668289Z","shell.execute_reply":"2024-08-13T17:15:28.234359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.displot(new_df['q2_len'])\nprint('minimum character',new_df['q2_len'].min())\nprint('maximum character',new_df['q2_len'].max())\nprint('average num of characters',int(new_df['q2_len'].mean()))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:29.433371Z","iopub.execute_input":"2024-08-13T17:15:29.433736Z","iopub.status.idle":"2024-08-13T17:15:30.717545Z","shell.execute_reply.started":"2024-08-13T17:15:29.43371Z","shell.execute_reply":"2024-08-13T17:15:30.716426Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#common_words\n\nsns.displot(new_df[new_df['is_duplicate']==0]['word_common'],label='non dupliacte')\nsns.displot(new_df[new_df['is_duplicate']==1]['word_common'],label='dupliacte')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:30.719327Z","iopub.execute_input":"2024-08-13T17:15:30.719666Z","iopub.status.idle":"2024-08-13T17:15:31.979972Z","shell.execute_reply.started":"2024-08-13T17:15:30.719638Z","shell.execute_reply":"2024-08-13T17:15:31.978633Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#word share\n\nsns.displot(new_df[new_df['is_duplicate']==0]['word_share'],label='non dupliacte')\nsns.displot(new_df[new_df['is_duplicate']==1]['word_share'],label='non dupliacte')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:32.461102Z","iopub.execute_input":"2024-08-13T17:15:32.462171Z","iopub.status.idle":"2024-08-13T17:15:33.363112Z","shell.execute_reply.started":"2024-08-13T17:15:32.462127Z","shell.execute_reply":"2024-08-13T17:15:33.361977Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ques_df = new_df[['question1','question2']]\nques_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:34.232258Z","iopub.execute_input":"2024-08-13T17:15:34.233165Z","iopub.status.idle":"2024-08-13T17:15:34.249183Z","shell.execute_reply.started":"2024-08-13T17:15:34.233131Z","shell.execute_reply":"2024-08-13T17:15:34.248233Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_df = new_df.drop(columns=['id','qid1','qid2','question1','question2'])\nprint(final_df.shape)\nfinal_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:35.287717Z","iopub.execute_input":"2024-08-13T17:15:35.288512Z","iopub.status.idle":"2024-08-13T17:15:35.306694Z","shell.execute_reply.started":"2024-08-13T17:15:35.288474Z","shell.execute_reply":"2024-08-13T17:15:35.305636Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\n#merge text\nquestions = list(ques_df['question1'])+list(ques_df['question2'])\ncv = CountVectorizer(max_features = 3000)\nq1_arr , q2_arr = np.vsplit(cv.fit_transform(questions).toarray(),2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:36.259684Z","iopub.execute_input":"2024-08-13T17:15:36.260058Z","iopub.status.idle":"2024-08-13T17:15:37.741888Z","shell.execute_reply.started":"2024-08-13T17:15:36.26003Z","shell.execute_reply":"2024-08-13T17:15:37.740727Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_df1 = pd.DataFrame(q1_arr,index = ques_df.index)\ntemp_df1 = pd.DataFrame(q2_arr,index = ques_df.index)\ntemp_df = pd.concat([temp_df1,temp_df2],axis=1)\ntemp_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:38.652224Z","iopub.execute_input":"2024-08-13T17:15:38.652649Z","iopub.status.idle":"2024-08-13T17:15:41.727542Z","shell.execute_reply.started":"2024-08-13T17:15:38.652615Z","shell.execute_reply":"2024-08-13T17:15:41.726125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_df = new_df.drop(columns=['id','qid1','qid2','question1','question2'])\nprint(final_df.shape)\nfinal_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:42.771056Z","iopub.execute_input":"2024-08-13T17:15:42.771463Z","iopub.status.idle":"2024-08-13T17:15:42.788804Z","shell.execute_reply.started":"2024-08-13T17:15:42.771434Z","shell.execute_reply":"2024-08-13T17:15:42.787663Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.feature_extraction.text import CountVectorizer\n#merge text\nquestions = list(ques_df['question1'])+list(ques_df['question2'])\ncv = CountVectorizer(max_features = 3000)\nq1_arr , q2_arr = np.vsplit(cv.fit_transform(questions).toarray(),2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:44.178704Z","iopub.execute_input":"2024-08-13T17:15:44.179086Z","iopub.status.idle":"2024-08-13T17:15:45.793624Z","shell.execute_reply.started":"2024-08-13T17:15:44.179056Z","shell.execute_reply":"2024-08-13T17:15:45.792636Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"temp_df1 = pd.DataFrame(q1_arr,index = ques_df.index)\ntemp_df2 = pd.DataFrame(q2_arr,index = ques_df.index)\ntemp_df = pd.concat([temp_df1,temp_df2],axis=1)\ntemp_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:47.140355Z","iopub.execute_input":"2024-08-13T17:15:47.140746Z","iopub.status.idle":"2024-08-13T17:15:50.162876Z","shell.execute_reply.started":"2024-08-13T17:15:47.140716Z","shell.execute_reply":"2024-08-13T17:15:50.16186Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_df = pd.concat([final_df,temp_df],axis=1)\nprint(final_df.shape)\nprint(final_df.head())","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:51.333911Z","iopub.execute_input":"2024-08-13T17:15:51.334883Z","iopub.status.idle":"2024-08-13T17:15:53.177478Z","shell.execute_reply.started":"2024-08-13T17:15:51.334847Z","shell.execute_reply":"2024-08-13T17:15:53.176359Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# Assuming the first column is the target variable\nX = final_df.iloc[:, 1:].values  # Features (all columns except the first one)\ny = final_df.iloc[:, 0].values   # Target (first column)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:54.605052Z","iopub.execute_input":"2024-08-13T17:15:54.605583Z","iopub.status.idle":"2024-08-13T17:15:57.679031Z","shell.execute_reply.started":"2024-08-13T17:15:54.605549Z","shell.execute_reply":"2024-08-13T17:15:57.677902Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"final_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:15:58.943641Z","iopub.execute_input":"2024-08-13T17:15:58.944017Z","iopub.status.idle":"2024-08-13T17:15:58.951488Z","shell.execute_reply.started":"2024-08-13T17:15:58.943985Z","shell.execute_reply":"2024-08-13T17:15:58.950118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Impute missing values in X_train and X_test\nimputer = SimpleImputer(strategy='mean')  # You can change the strategy to 'median', 'most_frequent', etc.\nX_train = imputer.fit_transform(X_train)\nX_test = imputer.transform(X_test)\n\n# Train and predict with RandomForest\nrf = RandomForestClassifier()\nrf.fit(X_train, y_train)\ny_pred = rf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(\"Accuracy:\", accuracy)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:18:07.857407Z","iopub.execute_input":"2024-08-13T17:18:07.857823Z","iopub.status.idle":"2024-08-13T17:19:37.84943Z","shell.execute_reply.started":"2024-08-13T17:18:07.857797Z","shell.execute_reply":"2024-08-13T17:19:37.84828Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from xgboost import XGBClassifier\nXgb = XGBClassifier()\nXgb.fit(X_train,y_train)\ny_pred = Xgb.predict(X_test)\naccuracy_score(y_test,y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:33:40.263277Z","iopub.execute_input":"2024-08-13T17:33:40.264212Z","iopub.status.idle":"2024-08-13T17:34:06.036295Z","shell.execute_reply.started":"2024-08-13T17:33:40.264179Z","shell.execute_reply":"2024-08-13T17:34:06.03515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Advance feature \n1.Token Features \n\ncwc_min - ratio of number of common words to length of smaller question\ncwc_max - ratio of number of common words to length of larger question\ncsc_min - ratio of common stop words to smaller stop words count among the two questions\ncsc_max - ratio of common stop words to larger stop words count among the two questions\nctc_min - ratio of common token to smaller token count among two questions \nctc_max - ratio of common token to larger token count among two questions\nlast_word_eq - 1 if last word in two question is same , 0 otherwise\nfirst_word_eq - 1 if first word in two question is same , 0 otherwise\n\n2.Length BAsed Features\nmean_len - mean of the length of the two question\nabs_len_diff - Absolute difference between the length of two question \nlongest_substr_ratio - ration of length of longest substring among the two questions to the length of the smaller question\n\n3.Fuzzy Feature\nfuzz_ratio - fuzz_ratio score fuzzywuzzy\nfuzz_partial_ration - fuzz_partial_ratio score fuzzywuzzy\ntoken_sort_ratio - token_sort_Ration from fuzzywuzzy\ntoken_set_ratio - token_set_ratio from fuzzywuzzy\n","metadata":{}},{"cell_type":"code","source":"import re\nfrom bs4 import BeautifulSoup\nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:02:58.610019Z","iopub.execute_input":"2024-08-13T18:02:58.610966Z","iopub.status.idle":"2024-08-13T18:02:58.619711Z","shell.execute_reply.started":"2024-08-13T18:02:58.61093Z","shell.execute_reply":"2024-08-13T18:02:58.618502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/quora-question-pairs/train.csv.zip')","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:04:10.567612Z","iopub.execute_input":"2024-08-13T18:04:10.568005Z","iopub.status.idle":"2024-08-13T18:04:12.377074Z","shell.execute_reply.started":"2024-08-13T18:04:10.567975Z","shell.execute_reply":"2024-08-13T18:04:12.375848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df = df.sample(30000,random_state = 2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:05:08.547148Z","iopub.execute_input":"2024-08-13T18:05:08.547584Z","iopub.status.idle":"2024-08-13T18:05:08.575607Z","shell.execute_reply.started":"2024-08-13T18:05:08.54755Z","shell.execute_reply":"2024-08-13T18:05:08.574043Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:05:26.715841Z","iopub.execute_input":"2024-08-13T18:05:26.716385Z","iopub.status.idle":"2024-08-13T18:05:26.733555Z","shell.execute_reply.started":"2024-08-13T18:05:26.716342Z","shell.execute_reply":"2024-08-13T18:05:26.732157Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def preprocess(q):\n    q = str(q).lower().strip()\n    #Replace certain special character with their string equivalent \n    q = q.replace('%','percent')\n    q = q.replace('$','dollar')\n    q = q.replace('@','at')\n    \n    #the pattern '[math]' appears around 900 times in the whole dataset.\n    q=q.replace('[math]','')\n    \n    #Replacing same number with string equivalent \n    q=q.replace(',000,000,000','b')\n    q=q.replace(',000,000','m')\n    q=q.replace(',000','k')\n    q =re.sub(r'([0-9]+)000000000',r'\\1b',q) \n    q =re.sub(r'([0-9]+)000000',r'\\1m',q)\n    q =re.sub(r'([0-9]+)000',r'\\1k',q)\n    \n    #Decontracting word\n    contractions = {\n    \"ain't\": \"am not / are not / is not / has not / have not\",\n    \"aren't\": \"are not / am not\",\n    \"can't\": \"cannot\",\n    \"can't've\": \"cannot have\",\n    \"'cause\": \"because\",\n    \"could've\": \"could have\",\n    \"couldn't\": \"could not\",\n    \"couldn't've\": \"could not have\",\n    \"didn't\": \"did not\",\n    \"doesn't\": \"does not\",\n    \"don't\": \"do not\",\n    \"hadn't\": \"had not\",\n    \"hadn't've\": \"had not have\",\n    \"hasn't\": \"has not\",\n    \"haven't\": \"have not\",\n    \"he'd\": \"he had / he would\",\n    \"he'd've\": \"he would have\",\n    \"he'll\": \"he shall / he will\",\n    \"he'll've\": \"he shall have / he will have\",\n    \"he's\": \"he has / he is\",\n    \"how'd\": \"how did\",\n    \"how'd'y\": \"how do you\",\n    \"how'll\": \"how will\",\n    \"how's\": \"how has / how is / how does\",\n    \"I'd\": \"I had / I would\",\n    \"I'd've\": \"I would have\",\n    \"I'll\": \"I shall / I will\",\n    \"I'll've\": \"I shall have / I will have\",\n    \"I'm\": \"I am\",\n    \"I've\": \"I have\",\n    \"isn't\": \"is not\",\n    \"it'd\": \"it had / it would\",\n    \"it'd've\": \"it would have\",\n    \"it'll\": \"it shall / it will\",\n    \"it'll've\": \"it shall have / it will have\",\n    \"it's\": \"it has / it is\",\n    \"let's\": \"let us\",\n    \"ma'am\": \"madam\",\n    \"mayn't\": \"may not\",\n    \"might've\": \"might have\",\n    \"mightn't\": \"might not\",\n    \"mightn't've\": \"might not have\",\n    \"must've\": \"must have\",\n    \"mustn't\": \"must not\",\n    \"mustn't've\": \"must not have\",\n    \"needn't\": \"need not\",\n    \"needn't've\": \"need not have\",\n    \"o'clock\": \"of the clock\",\n    \"oughtn't\": \"ought not\",\n    \"oughtn't've\": \"ought not have\",\n    \"shan't\": \"shall not\",\n    \"sha'n't\": \"shall not\",\n    \"shan't've\": \"shall not have\",\n    \"she'd\": \"she had / she would\",\n    \"she'd've\": \"she would have\",\n    \"she'll\": \"she shall / she will\",\n    \"she'll've\": \"she shall have / she will have\",\n    \"she's\": \"she has / she is\",\n    \"should've\": \"should have\",\n    \"shouldn't\": \"should not\",\n    \"shouldn't've\": \"should not have\",\n    \"so've\": \"so have\",\n    \"so's\": \"so as / so is\",\n    \"that'd\": \"that would / that had\",\n    \"that'd've\": \"that would have\",\n    \"that's\": \"that has / that is\",\n    \"there'd\": \"there had / there would\",\n    \"there'd've\": \"there would have\",\n    \"there's\": \"there has / there is\",\n    \"they'd\": \"they had / they would\",\n    \"they'd've\": \"they would have\",\n    \"they'll\": \"they shall / they will\",\n    \"they'll've\": \"they shall have / they will have\",\n    \"they're\": \"they are\",\n    \"they've\": \"they have\",\n    \"to've\": \"to have\",\n    \"wasn't\": \"was not\",\n    \"we'd\": \"we had / we would\",\n    \"we'd've\": \"we would have\",\n    \"we'll\": \"we will\",\n    \"we'll've\": \"we will have\",\n    \"we're\": \"we are\",\n    \"we've\": \"we have\",\n    \"weren't\": \"were not\",\n    \"what'll\": \"what shall / what will\",\n    \"what'll've\": \"what shall have / what will have\",\n    \"what're\": \"what are\",\n    \"what's\": \"what has / what is\",\n    \"what've\": \"what have\",\n    \"when's\": \"when has / when is\",\n    \"when've\": \"when have\",\n    \"where'd\": \"where did\",\n    \"where's\": \"where has / where is\",\n    \"where've\": \"where have\",\n    \"who'll\": \"who shall / who will\",\n    \"who'll've\": \"who shall have / who will have\",\n    \"who's\": \"who has / who is\",\n    \"who've\": \"who have\",\n    \"why's\": \"why has / why is\",\n    \"why've\": \"why have\",\n    \"will've\": \"will have\",\n    \"won't\": \"will not\",\n    \"won't've\": \"will not have\",\n    \"would've\": \"would have\",\n    \"wouldn't\": \"would not\",\n    \"wouldn't've\": \"would not have\",\n    \"y'all\": \"you all\",\n    \"y'all'd\": \"you all would\",\n    \"y'all'd've\": \"you all would have\",\n    \"y'all're\": \"you all are\",\n    \"y'all've\": \"you all have\",\n    \"you'd\": \"you had / you would\",\n    \"you'd've\": \"you would have\",\n    \"you'll\": \"you shall / you will\",\n    \"you'll've\": \"you shall have / you will have\",\n    \"you're\": \"you are\",\n    \"you've\": \"you have\"\n    }\n    \n    q_decontracted=[]\n    \n    for word in q.split():\n        if word in contractions:\n            word = contractions[word]\n            \n        q_decontracted.append(word)\n        \n    q = ' '.join(q_decontracted)\n    q = q.replace(\"'ve\",\" have\")\n    q = q.replace(\"n't\",\" not\")\n    q = q.replace(\"'re\",\" are\")\n    q = q.replace(\"'ll\",\" will\")\n    \n    #removing HTML tags\n    q = BeautifulSoup(q)\n    q = q.get_text()\n    \n    #Remove Punctuation\n    pattern = re.compile('\\W')\n    q = re.sub(pattern,' ',q).strip()\n    \n    return q","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:30:01.319322Z","iopub.execute_input":"2024-08-13T18:30:01.319701Z","iopub.status.idle":"2024-08-13T18:30:01.339052Z","shell.execute_reply.started":"2024-08-13T18:30:01.319674Z","shell.execute_reply":"2024-08-13T18:30:01.337672Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"preprocess(\"I've already! wasn't <b> done </b>\")","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:30:04.234936Z","iopub.execute_input":"2024-08-13T18:30:04.235349Z","iopub.status.idle":"2024-08-13T18:30:04.243374Z","shell.execute_reply.started":"2024-08-13T18:30:04.23529Z","shell.execute_reply":"2024-08-13T18:30:04.242218Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['question1']= new_df['question1'].apply(preprocess)\nnew_df['question2']= new_df['question2'].apply(preprocess)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:31:24.867508Z","iopub.execute_input":"2024-08-13T18:31:24.86796Z","iopub.status.idle":"2024-08-13T18:31:41.480484Z","shell.execute_reply.started":"2024-08-13T18:31:24.867929Z","shell.execute_reply":"2024-08-13T18:31:41.479565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:31:41.621458Z","iopub.execute_input":"2024-08-13T18:31:41.621867Z","iopub.status.idle":"2024-08-13T18:31:41.634083Z","shell.execute_reply.started":"2024-08-13T18:31:41.621833Z","shell.execute_reply":"2024-08-13T18:31:41.633019Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['q1_len'] = new_df['question1'].str.len()\nnew_df['q2_len'] = new_df['question2'].str.len()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:33:44.616359Z","iopub.execute_input":"2024-08-13T18:33:44.616764Z","iopub.status.idle":"2024-08-13T18:33:44.651398Z","shell.execute_reply.started":"2024-08-13T18:33:44.616735Z","shell.execute_reply":"2024-08-13T18:33:44.650225Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['q1_num_words'] = new_df['question1'].apply(lambda row: len(row.split(\" \")))\nnew_df['q2_num_words'] = new_df['question2'].apply(lambda row: len(row.split(\" \")))\nnew_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:35:15.720262Z","iopub.execute_input":"2024-08-13T18:35:15.720741Z","iopub.status.idle":"2024-08-13T18:35:15.826372Z","shell.execute_reply.started":"2024-08-13T18:35:15.720706Z","shell.execute_reply":"2024-08-13T18:35:15.825104Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def common_words(row):\n    w1 = set(map(lambda word: word.lower().strip(),row['question1'].split(\" \")))\n    w2 = set(map(lambda word: word.lower().strip(),row['question1'].split(\" \")))\n    return len(w1 & w2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:36:55.554553Z","iopub.execute_input":"2024-08-13T18:36:55.55582Z","iopub.status.idle":"2024-08-13T18:36:55.561871Z","shell.execute_reply.started":"2024-08-13T18:36:55.555782Z","shell.execute_reply":"2024-08-13T18:36:55.560671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['word_common'] = new_df.apply(common_words,axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:37:43.886392Z","iopub.execute_input":"2024-08-13T18:37:43.886813Z","iopub.status.idle":"2024-08-13T18:37:44.563115Z","shell.execute_reply.started":"2024-08-13T18:37:43.886786Z","shell.execute_reply":"2024-08-13T18:37:44.562007Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def total_words(row):\n    w1 = set(map(lambda word : word.lower().strip(),row['question1'].split(\" \")))\n    w2 = set(map(lambda word: word.lower().strip(),row['question2'].split(\" \")))\n    return len(w1)+len(w2)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:38:18.916795Z","iopub.execute_input":"2024-08-13T18:38:18.917187Z","iopub.status.idle":"2024-08-13T18:38:18.923186Z","shell.execute_reply.started":"2024-08-13T18:38:18.917157Z","shell.execute_reply":"2024-08-13T18:38:18.922096Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"new_df['word_total']= new_df.apply(total_words,axis=1)\nnew_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T18:38:57.237353Z","iopub.execute_input":"2024-08-13T18:38:57.237768Z","iopub.status.idle":"2024-08-13T18:38:57.909029Z","shell.execute_reply.started":"2024-08-13T18:38:57.237737Z","shell.execute_reply":"2024-08-13T18:38:57.907994Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Advance Feature Engineering","metadata":{}},{"cell_type":"code","source":"from nltk.corpus import stopwords\n\ndef fetch_token_features(row):\n    q1 = row['question1']\n    q2 = row['question2']\n    \n    SAFE_DIV = 0.0001\n    STOP_WORDS = stopwords.words(\"english\")\n    token_features = [0.0]*8\n    \n    #Converting the sentences into tokens\n    q1_tokens = q1.split()\n    q2_tokens = q2.split()\n    \n    if len(q1_tokens) == 0 or len(q2_tokens) == 0:\n        return token_features\n    \n    #Get the non-stopwords in Questios\n    q1_words = set([word for word in q1_tokens if word not in STOP_WORDS])\n    q2_words = set([word for word in q2_tokens if word not in STOP_WORDS]) \n    \n    #Get the stop words in Questions\n    q1_stops = set([word for word in q1_tokens if word in STOP_WORDS])\n    q2_stops = set([word for word in q2_tokens if word in STOP_WORDS])\n    \n    #Get the common non-stopwords from the question pairs\n    common_word_count = len(q1_words.intersection(q2_words))\n    \n    #get the common stop words from the question pairs\n    common_stop_count = len(q1_stops.intersection(q2_stops))\n    \n    #get the common tokens from the question pairs \n    common_token_count =len(set(q1_tokens).intersection(set(q2_tokens)))\n    \n    token_features[0] = common_word_count / (min(len(q1_words),len(q2_words))+SAFE_DIV)\n    token_features[1] = common_word_count / (max(len(q1_words),len(q2_words))+SAFE_DIV)\n    token_features[2] = common_stop_count / (min(len(q1_stops),len(q2_stops))+SAFE_DIV)\n    token_features[3] = common_stop_count / (max(len(q1_stops),len(q2_stops))+SAFE_DIV)\n    token_features[4] = common_token_count / (min(len(q1_tokens),len(q2_tokens))+SAFE_DIV)\n    token_features[5] = common_token_count / (max(len(q1_tokens),len(q2_tokens))+SAFE_DIV)\n    \n    #Last word of both question is same or not\n    token_features[6] = int(q1_tokens[-1] == q2_tokens[-1])\n    \n    #first word of both question is same or not\n    token_features[7] = int(q1_tokens[0] == q2_tokens[0])\n    \n    return token_features","metadata":{"execution":{"iopub.status.busy":"2024-08-13T19:13:59.554321Z","iopub.execute_input":"2024-08-13T19:13:59.554727Z","iopub.status.idle":"2024-08-13T19:13:59.566528Z","shell.execute_reply.started":"2024-08-13T19:13:59.554696Z","shell.execute_reply":"2024-08-13T19:13:59.565193Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install python-Levenshtein --index-url=https://pypi.org/simple","metadata":{"execution":{"iopub.status.busy":"2024-08-13T19:34:23.017777Z","iopub.execute_input":"2024-08-13T19:34:23.018143Z","iopub.status.idle":"2024-08-13T19:36:52.74076Z","shell.execute_reply.started":"2024-08-13T19:34:23.01811Z","shell.execute_reply":"2024-08-13T19:36:52.739215Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import distance","metadata":{"execution":{"iopub.status.busy":"2024-08-13T19:26:19.809719Z","iopub.execute_input":"2024-08-13T19:26:19.810587Z","iopub.status.idle":"2024-08-13T19:26:19.837932Z","shell.execute_reply.started":"2024-08-13T19:26:19.810542Z","shell.execute_reply":"2024-08-13T19:26:19.836569Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import distance\n\ndef fetch_length_features(row):\n    q1 = row['question1']\n    q2 = row['question2']\n    \n    length_features = [0.0]*3\n    \n    #converting the sentences into tokens\n    q1_tokens = q1.split()\n    q2_tokens = q2.split()\n    \n    if len(q1_tokens) == 0 or len(q2_tokens) == 0:\n        return length_features\n    \n    #Absolute length feature\n    length_features[0] = abs(len(q1_token)-len(q2_token))\n    \n    #Average token length of both question\n    length_features[1] = (len(q1_token) + len(q2_token)) /2\n    \n    strs = list(distance.lcsubstrings(q1,q2))\n    length_features[2] = len(strs[0]) / (min(len(q1),len(q2))+1)\n                             \n    return length_features","metadata":{"execution":{"iopub.status.busy":"2024-08-13T19:25:47.603292Z","iopub.execute_input":"2024-08-13T19:25:47.603709Z","iopub.status.idle":"2024-08-13T19:25:47.64578Z","shell.execute_reply.started":"2024-08-13T19:25:47.603678Z","shell.execute_reply":"2024-08-13T19:25:47.644379Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"token_features = new_df.apply(fetch_token_features,axis = 1)\nnew_df['cwc_min'] = list(map(lambda x: x[0] , token_features))\nnew_df['cwc_max'] = list(map(lambda x: x[1] , token_features)) \nnew_df['csc_min'] = list(map(lambda x: x[2] , token_features))\nnew_df['csc_max'] = list(map(lambda x: x[3] , token_features))\nnew_df['ctc_min'] = list(map(lambda x: x[4] , token_features))\nnew_df['ctc_max'] = list(map(lambda x: x[5] , token_features))\nnew_df['last_word_eq'] = list(map(lambda x: x[6] , token_features))\nnew_df['first_word_eq'] = list(map(lambda x: x[7] , token_features))","metadata":{"execution":{"iopub.status.busy":"2024-08-13T19:14:01.867865Z","iopub.execute_input":"2024-08-13T19:14:01.868239Z","iopub.status.idle":"2024-08-13T19:14:09.755933Z","shell.execute_reply.started":"2024-08-13T19:14:01.86821Z","shell.execute_reply":"2024-08-13T19:14:09.754802Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}